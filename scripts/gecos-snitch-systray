#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2004-2006 Red Hat Inc. <http://www.redhat.com/>
# Copyright (C) 2005-2007 Collabora Ltd. <http://www.collabora.co.uk/>
# Copyright (C) 2014 Junta de Andalucia. <http://www.juntadeandalucia.es/>
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy,
# modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import sys
import traceback

import dbus
import dbus.mainloop.glib

from gi.repository import GObject
from gi.repository import GLib

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk

import os
import subprocess
gi.require_version('Notify', '0.7')
from gi.repository import Notify

DBUS_INTERFACE = "org.gecos.snitch"
DBUS_PATH = "/org/gecos/snitch"

class ChefSnitchSystray:
    def __init__(self):
        dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

        self.tray = Gtk.StatusIcon()
        self.tray.set_from_icon_name("emblem-system-symbolic");
        #self.tray.connect("popup-menu", self.on_right_click)
        self.tray.connect("activate", self.on_activate)
        self.tray.set_tooltip_text("GECOS Snitch")

        self.bus = dbus.SystemBus()
        self.bus.add_signal_receiver(self.is_active_has_changed_cb, \
                                     dbus_interface = DBUS_INTERFACE, \
                                     signal_name = "IsActiveHasChanged")

        self.bus.add_signal_receiver(self.message_notified_cb, \
                                     dbus_interface = DBUS_INTERFACE, \
                                     signal_name = "MessageNotified")

        self.loop = GLib.MainLoop()

        Notify.init("GECOS Snitch")
        self.update_status()

    def on_right_click(self, icon, event_button, event_time):
        self.make_menu(event_button, event_time)

    def __trigger_update(self, data):
        if (os.path.exists("/usr/bin/gecos-chef-client-wrapper")):
            subprocess.Popen(["sudo", "/usr/bin/gecos-chef-client-wrapper"])
        else:
            subprocess.Popen(["sudo", "/usr/bin/chef-client"])

    def on_activate(self, icon):
        event = Gtk.get_current_event()

        menu = Gtk.Menu()

        update = Gtk.MenuItem("Update")
        update.show()
        menu.append(update)
        update.connect("activate", self.__trigger_update)

        menu.popup(None, None, Gtk.status_icon_position_menu,
                   event.button, int(event.get_time()), self.tray)

    def make_menu(self, event_button, event_time):
        menu = Gtk.Menu()

        # show about dialog
        about = Gtk.MenuItem("About")
        about.show()
        menu.append(about)
        about.connect("activate", self.show_about_dialog)

        # Re-enable if you want the user to close this system tray icon
        ## add quit item
        #quit = Gtk.MenuItem("Quit")
        #quit.show()
        #menu.append(quit)
        #quit.connect("activate", self.__loop_quit)

        menu.popup(None, None, Gtk.status_icon_position_menu,
                   event_button, event_time, self.tray)

    def show_about_dialog(self, widget):
        about_dialog = Gtk.AboutDialog()
        about_dialog.set_destroy_with_parent (True)
        about_dialog.set_icon_name ("GECOS Snitch")
        about_dialog.set_name("GECOS Snitch")
        about_dialog.set_version("0.2")
        about_dialog.set_copyright("(C) 2014 Junta de Andalucía")
        about_dialog.set_comments("GECOS Activity Notifier")
        about_dialog.set_authors(["Javier Hernández <jhernandez@emergya.com>"])
        about_dialog.run()
        about_dialog.destroy()

    def __loop_quit (self, args):
        self.loop.quit()

    def get_is_active(self):
        remote_object = self.bus.get_object(DBUS_INTERFACE, DBUS_PATH)
        return bool(remote_object.GetActive(dbus_interface=DBUS_INTERFACE))

    def get_message(self):
        remote_object = self.bus.get_object(DBUS_INTERFACE, DBUS_PATH)
        return str(remote_object.GetMessage(dbus_interface=DBUS_INTERFACE))

    def update_status(self):
        if (self.get_is_active()):
            self.tray.set_from_icon_name("emblem-synchronizing-symbolic");
            self.tray.set_tooltip_text("Chef is running right now, do not turn \
                off your computer until this task finish")
        else:
            self.tray.set_from_icon_name("emblem-system-symbolic");
            self.tray.set_tooltip_text("GECOS Snitch")

    def is_active_has_changed_cb(self):
        is_active = self.get_is_active()
        print("The value of IsActive has changed to: %r" % (bool(is_active)))

        self.update_status()

    def message_notified_cb(self):
        message = self.get_message()
        print("A new message has been delivered: %s" % (message))
        self.notify("GECOS notification", message)

    # Simple notifications
    # If you want to add actions:
    # http://ubuntuforums.org/showthread.php?t=447613
    def notify(self, summary, body):
        n = Notify.Notification.new(summary, body,)
        n.show()

if __name__ == "__main__":
    app = ChefSnitchSystray()
    app.loop.run()
